from typing import Any, Union

import enum
import setools.exception
import typing
import weakref
AnyConstraint: Any
AnyDefault: Any
AnyRBACRule: Any
AnyTERule: Any
SELINUX_SIDNAMES: Any
TypeOrAttr: Any
XEN_SIDNAMES: Any

def __pyx_unpickle_AVRule(*args, **kwargs) -> Any: ...
def __pyx_unpickle_AVRuleXperm(*args, **kwargs) -> Any: ...
def __pyx_unpickle_BaseConstraint(*args, **kwargs) -> Any: ...
def __pyx_unpickle_BaseMLSLevel(*args, **kwargs) -> Any: ...
def __pyx_unpickle_BaseTERule(*args, **kwargs) -> Any: ...
def __pyx_unpickle_BaseType(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Boolean(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Bounds(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Category(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Common(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Conditional(*args, **kwargs) -> Any: ...
def __pyx_unpickle_ConditionalOperator(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Constraint(*args, **kwargs) -> Any: ...
def __pyx_unpickle_ConstraintExprNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_ConstraintExpression(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Context(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Default(*args, **kwargs) -> Any: ...
def __pyx_unpickle_DefaultRange(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Devicetreecon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_FSUse(*args, **kwargs) -> Any: ...
def __pyx_unpickle_FileNameTERule(*args, **kwargs) -> Any: ...
def __pyx_unpickle_GenfsFiletype(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Genfscon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Ibendportcon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Ibpkeycon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_InitialSID(*args, **kwargs) -> Any: ...
def __pyx_unpickle_IoctlSet(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Iomemcon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Ioportcon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Level(*args, **kwargs) -> Any: ...
def __pyx_unpickle_LevelDecl(*args, **kwargs) -> Any: ...
def __pyx_unpickle_MLSRule(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Netifcon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Nodecon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_ObjClass(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Ocontext(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Pcidevicecon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PermissionVectorIterator(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Pirqcon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PolicyCapability(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PolicyIterator(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PolicyObject(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PolicyRule(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PolicySymbol(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Portcon(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Range(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Role(*args, **kwargs) -> Any: ...
def __pyx_unpickle_RoleAllow(*args, **kwargs) -> Any: ...
def __pyx_unpickle_RoleTransition(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Sensitivity(*args, **kwargs) -> Any: ...
def __pyx_unpickle_TERule(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Type(*args, **kwargs) -> Any: ...
def __pyx_unpickle_TypeAttribute(*args, **kwargs) -> Any: ...
def __pyx_unpickle_User(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Validatetrans(*args, **kwargs) -> Any: ...
def lookup_boolean_name_sub(*args, **kwargs) -> Any: ...

class AVRule(BaseTERule):
    default: Any = ...
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def derive_expanded(self, *args, **kwargs) -> Any: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class AVRuleXperm(BaseTERule):
    default: Any = ...
    perms: Any = ...
    xperm_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BaseConstraint(PolicyObject):
    expression: Any = ...
    perms: Any = ...
    ruletype: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BaseMLSLevel(PolicyObject):
    sensitivity: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def categories(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BaseTERule(PolicyRule):
    conditional: Any = ...
    conditional_block: Any = ...
    filename: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def enabled(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BaseType(PolicySymbol):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def aliases(self, *args, **kwargs) -> Any: ...
    def attributes(self, *args, **kwargs) -> Any: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Boolean(PolicySymbol):
    state: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BooleanHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Bounds(PolicyObject):
    child: Any = ...
    parent: Any = ...
    ruletype: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BoundsRuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    typebounds: Any = ...

class Category(PolicySymbol):
    _value: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def aliases(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CategoryEbitmapIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CategoryHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Common(PolicySymbol):
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CommonHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Conditional(PolicyObject):
    booleans: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def evaluate(self, *args, **kwargs) -> Any: ...
    def expression(self, *args, **kwargs) -> Any: ...
    def false_rules(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def true_rules(self, *args, **kwargs) -> Any: ...
    def truth_table(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConditionalExprIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConditionalIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConditionalOperator(PolicyObject):
    _cond_expr_val_to_details: Any = ...
    evaluate: Any = ...
    precedence: Any = ...
    unary: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConditionalTERuleIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def ruletype_count(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Constraint(BaseConstraint):
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConstraintExprIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConstraintExprNode(PolicyObject):
    _expr_op_to_text: Any = ...
    _expr_type_to_text: Any = ...
    _role_syms: Any = ...
    _sym_to_text: Any = ...
    _type_syms: Any = ...
    _user_syms: Any = ...
    names: Any = ...
    symbol_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConstraintExpression(PolicyObject):
    mls: Any = ...
    roles: Any = ...
    types: Any = ...
    users: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def infix(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConstraintIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConstraintRuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    constrain: Any = ...
    mlsconstrain: Any = ...
    mlsvalidatetrans: Any = ...
    validatetrans: Any = ...

class ConstraintUseError(setools.exception.SymbolUseError): ...

class Context(PolicyObject):
    range_: Any = ...
    role: Any = ...
    type_: Any = ...
    user: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Default(PolicyObject):
    default: Any = ...
    ruletype: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DefaultRange(Default):
    default_range: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DefaultRangeValue(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    high: Any = ...
    low: Any = ...
    low_high: Any = ...
    @classmethod
    def from_default_range(self, *args, **kwargs) -> Any: ...

class DefaultRuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    default_range: Any = ...
    default_role: Any = ...
    default_type: Any = ...
    default_user: Any = ...

class DefaultValue(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    glblub: Any = ...
    source: Any = ...
    target: Any = ...
    @classmethod
    def from_default_range(self, *args, **kwargs) -> Any: ...

class Devicetreecon(Ocontext):
    path: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DevicetreeconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EbitmapIterator(PolicyIterator):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FSUse(Ocontext):
    fs: Any = ...
    ruletype: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FSUseIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FSUseRuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    fs_use_task: Any = ...
    fs_use_trans: Any = ...
    fs_use_xattr: Any = ...

class FileNameTERule(BaseTERule):
    default: Any = ...
    filename: Any = ...
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FileNameTERuleIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class GenfsFiletype(int):
    _filetype_to_text: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Genfscon(Ocontext):
    _sclass_to_stat: Any = ...
    filetype: Any = ...
    fs: Any = ...
    path: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class GenfsconIterator:
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class GenfsconOcontextIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class HandleUnknown(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    allow: Any = ...
    deny: Any = ...
    reject: Any = ...

class HashtabIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Ibendportcon(Ocontext):
    name: Any = ...
    port: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IbendportconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Ibpkeycon(Ocontext):
    pkeys: Any = ...
    subnet_prefix: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IbpkeyconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IbpkeyconRange(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _fields_defaults: Any = ...
    _replace: Any = ...
    high: Any = ...
    low: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class InitialSID(Ocontext):
    name: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class InitialSIDIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class InvalidBoolean(setools.exception.InvalidSymbol): ...

class InvalidBoundsType(setools.exception.InvalidSymbol): ...

class InvalidCategory(setools.exception.InvalidSymbol): ...

class InvalidClass(setools.exception.InvalidSymbol): ...

class InvalidCommon(setools.exception.InvalidSymbol): ...

class InvalidConstraintType(setools.exception.InvalidSymbol): ...

class InvalidDefaultRange(setools.exception.InvalidSymbol): ...

class InvalidDefaultType(setools.exception.InvalidRuleType): ...

class InvalidDefaultValue(setools.exception.InvalidSymbol): ...

class InvalidFSUseType(setools.exception.InvalidRuleType): ...

class InvalidInitialSid(setools.exception.InvalidSymbol): ...

class InvalidLevel(setools.exception.InvalidSymbol): ...

class InvalidLevelDecl(setools.exception.InvalidSymbol): ...

class InvalidMLSRuleType(setools.exception.InvalidRuleType): ...

class InvalidPolicy(ValueError, setools.exception.PolicyrepException): ...

class InvalidRBACRuleType(setools.exception.InvalidRuleType): ...

class InvalidRange(setools.exception.InvalidSymbol): ...

class InvalidRole(setools.exception.InvalidSymbol): ...

class InvalidRuleType(setools.exception.InvalidSymbol): ...

class InvalidSensitivity(setools.exception.InvalidSymbol): ...

class InvalidTERuleType(setools.exception.InvalidRuleType): ...

class InvalidType(setools.exception.InvalidSymbol): ...

class InvalidUser(setools.exception.InvalidSymbol): ...

class IoctlSet(frozenset):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def ranges(self, *args, **kwargs) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __reduce_cython__(self, *args, **kwargs) -> Any: ...
    def __setstate_cython__(self, *args, **kwargs) -> Any: ...

class Iomemcon(Ocontext):
    addr: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IomemconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IomemconRange(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _fields_defaults: Any = ...
    _replace: Any = ...
    high: Any = ...
    low: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class Ioportcon(Ocontext):
    ports: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IoportconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IoportconRange(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _fields_defaults: Any = ...
    _replace: Any = ...
    high: Any = ...
    low: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class Level(BaseMLSLevel):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __xor__(self, other) -> Any: ...

class LevelDecl(BaseMLSLevel):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class LevelDeclHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class LowLevelPolicyError(ValueError, setools.exception.PolicyrepException): ...

class MLSDisabled(setools.exception.PolicyrepException): ...

class MLSRule(PolicyRule):
    default: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MLSRuleIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MLSRuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    range_transition: Any = ...

class Netifcon(Ocontext):
    netif: Any = ...
    packet: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class NetifconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class NoCommon(AttributeError, setools.exception.PolicyrepException): ...

class NoDefaults(setools.exception.InvalidSymbol): ...

class NoStatement(setools.exception.SymbolUseError): ...

class Nodecon(Ocontext):
    ip_version: Any = ...
    network: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class NodeconIPVersion(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    ipv4: Any = ...
    ipv6: Any = ...

class NodeconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ObjClass(PolicySymbol):
    common: Any = ...
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def constraints(self, *args, **kwargs) -> Any: ...
    def defaults(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def validatetrans(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ObjClassHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Ocontext(PolicyObject):
    context: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class OcontextIterator(PolicyIterator):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Pcidevicecon(Ocontext):
    device: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PcideviceconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PermissionVectorIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Pirqcon(Ocontext):
    irq: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PirqconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicyCapability(PolicySymbol):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicyCapabilityIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicyEnum(enum.Enum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    @classmethod
    def lookup(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class PolicyIterator:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicyObject:
    policy: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicyRule(PolicyObject):
    conditional: Any = ...
    conditional_block: Any = ...
    extended: Any = ...
    origin: Any = ...
    ruletype: Any = ...
    source: Any = ...
    target: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def enabled(self, *args, **kwargs) -> Any: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicySymbol(PolicyObject):
    name: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PolicyTarget(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    selinux: Any = ...
    xen: Any = ...

class Portcon(Ocontext):
    ports: Any = ...
    protocol: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PortconIterator(OcontextIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PortconProtocol(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    dccp: Any = ...
    sctp: Any = ...
    tcp: Any = ...
    udp: Any = ...

class PortconRange(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _fields_defaults: Any = ...
    _replace: Any = ...
    high: Any = ...
    low: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class RBACRuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    allow: Any = ...
    role_transition: Any = ...

class Range(PolicyObject):
    high: Any = ...
    low: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Role(PolicySymbol):
    dominated_roles: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def types(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RoleAllow(PolicyRule):
    default: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RoleAllowIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RoleEbitmapIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RoleHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RoleTransition(PolicyRule):
    default: Any = ...
    tclass: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RoleTransitionIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RuleNotConditional(AttributeError, setools.exception.PolicyrepException): ...

class RuleUseError(setools.exception.SymbolUseError): ...

class SELinuxPolicy:
    allow_count: Any = ...
    allowxperm_count: Any = ...
    auditallow_count: Any = ...
    auditallowxperm_count: Any = ...
    boolean_count: Any = ...
    category_count: Any = ...
    class_count: Any = ...
    common_count: Any = ...
    conditional_count: Any = ...
    constraint_count: Any = ...
    default_count: Any = ...
    devicetreecon_count: Any = ...
    dontaudit_count: Any = ...
    dontauditxperm_count: Any = ...
    fs_use_count: Any = ...
    genfscon_count: Any = ...
    handle_unknown: Any = ...
    ibendportcon_count: Any = ...
    ibpkeycon_count: Any = ...
    initialsids_count: Any = ...
    iomemcon_count: Any = ...
    ioportcon_count: Any = ...
    level_count: Any = ...
    mls: Any = ...
    mlsconstraint_count: Any = ...
    mlsvalidatetrans_count: Any = ...
    netifcon_count: Any = ...
    neverallow_count: Any = ...
    neverallowxperm_count: Any = ...
    nodecon_count: Any = ...
    path: Any = ...
    pcidevicecon_count: Any = ...
    permission_count: Any = ...
    permissives_count: Any = ...
    pirqcon_count: Any = ...
    polcap_count: Any = ...
    portcon_count: Any = ...
    range_transition_count: Any = ...
    role_allow_count: Any = ...
    role_count: Any = ...
    role_transition_count: Any = ...
    target_platform: Any = ...
    type_attribute_count: Any = ...
    type_change_count: Any = ...
    type_count: Any = ...
    type_member_count: Any = ...
    type_transition_count: Any = ...
    typebounds_count: Any = ...
    user_count: Any = ...
    validatetrans_count: Any = ...
    version: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def bools(self, *args, **kwargs) -> Any: ...
    def bounds(self, *args, **kwargs) -> Any: ...
    def categories(self, *args, **kwargs) -> Any: ...
    def classes(self, *args, **kwargs) -> Any: ...
    def commons(self, *args, **kwargs) -> Any: ...
    def conditionals(self, *args, **kwargs) -> Any: ...
    def constraints(regularandMLS) -> Any: ...
    def defaults(self, *args, **kwargs) -> Any: ...
    def devicetreecons(self, *args, **kwargs) -> Any: ...
    def fs_uses(self, *args, **kwargs) -> Any: ...
    def genfscons(self, *args, **kwargs) -> Any: ...
    def ibendportcons(self, *args, **kwargs) -> Any: ...
    def ibpkeycons(self, *args, **kwargs) -> Any: ...
    def initialsids(self, *args, **kwargs) -> Any: ...
    def iomemcons(self, *args, **kwargs) -> Any: ...
    def ioportcons(self, *args, **kwargs) -> Any: ...
    def levels(self, *args, **kwargs) -> Any: ...
    def lookup_boolean(self, *args, **kwargs) -> Any: ...
    def lookup_category(self, *args, **kwargs) -> Any: ...
    def lookup_class(self, *args, **kwargs) -> Any: ...
    def lookup_common(self, *args, **kwargs) -> Any: ...
    def lookup_initialsid(self, *args, **kwargs) -> Any: ...
    def lookup_level(self, *args, **kwargs) -> Any: ...
    def lookup_range(self, *args, **kwargs) -> Any: ...
    def lookup_role(self, *args, **kwargs) -> Any: ...
    def lookup_sensitivity(self, *args, **kwargs) -> Any: ...
    def lookup_type(self, *args, **kwargs) -> Any: ...
    def lookup_type_or_attr(self, *args, **kwargs) -> Any: ...
    def lookup_typeattr(self, *args, **kwargs) -> Any: ...
    def lookup_user(self, *args, **kwargs) -> Any: ...
    def mlsrules(self, *args, **kwargs) -> Any: ...
    def netifcons(self, *args, **kwargs) -> Any: ...
    def nodecons(self, *args, **kwargs) -> Any: ...
    def pcidevicecons(self, *args, **kwargs) -> Any: ...
    def pirqcons(self, *args, **kwargs) -> Any: ...
    def polcaps(self, *args, **kwargs) -> Any: ...
    def portcons(self, *args, **kwargs) -> Any: ...
    def rbacrules(self, *args, **kwargs) -> Any: ...
    def roles(self, *args, **kwargs) -> Any: ...
    def sensitivities(self, *args, **kwargs) -> Any: ...
    def terules(self, *args, **kwargs) -> Any: ...
    def typeattributes(self, *args, **kwargs) -> Any: ...
    def types(self, *args, **kwargs) -> Any: ...
    def users(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Sensitivity(PolicySymbol):
    _value: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def aliases(self, *args, **kwargs) -> Any: ...
    def level_decl(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SensitivityHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SymbolUseError(AttributeError, setools.exception.PolicyrepException): ...

class TERule(BaseTERule):
    default: Any = ...
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TERuleIterator(PolicyIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def ruletype_count(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TERuleNoFilename(AttributeError, setools.exception.PolicyrepException): ...

class TERuletype(PolicyEnum):
    __new__: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...
    allow: Any = ...
    allowxperm: Any = ...
    auditallow: Any = ...
    auditallowxperm: Any = ...
    dontaudit: Any = ...
    dontauditxperm: Any = ...
    neverallow: Any = ...
    neverallowxperm: Any = ...
    type_change: Any = ...
    type_member: Any = ...
    type_transition: Any = ...

class Type(BaseType):
    ispermissive: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def aliases(self, *args, **kwargs) -> Any: ...
    def attributes(self, *args, **kwargs) -> Any: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeAttribute(BaseType):
    ispermissive: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def aliases(self, *args, **kwargs) -> Any: ...
    def attributes(self, *args, **kwargs) -> Any: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeAttributeEbitmapIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeAttributeHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeEbitmapIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeOrAttributeEbitmapIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeboundsIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class User(PolicySymbol):
    mls_level: Any = ...
    mls_range: Any = ...
    roles: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UserEbitmapIterator(EbitmapIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UserHashtabIterator(HashtabIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Validatetrans(BaseConstraint):
    perms: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def statement(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ValidatetransIterator(ConstraintIterator):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class WeakKeyDefaultDict(weakref.WeakKeyDictionary):
    _abc_impl: Any = ...
    __abstractmethods__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, index) -> Any: ...
    def __missing__(self, *args, **kwargs) -> Any: ...

class truth_table_row(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _fields_defaults: Any = ...
    _replace: Any = ...
    result: Any = ...
    values: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...
